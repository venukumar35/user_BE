
Object.defineProperty(exports, "__esModule", { value: true });

const {
  Decimal,
  objectEnumValues,
  makeStrictEnum,
  Public,
} = require('@prisma/client/runtime/index-browser')


const Prisma = {}

exports.Prisma = Prisma

/**
 * Prisma Client JS version: 4.16.2
 * Query Engine version: 4bc8b6e1b66cb932731fb1bdbbc550d1e010de81
 */
Prisma.prismaVersion = {
  client: "4.16.2",
  engine: "4bc8b6e1b66cb932731fb1bdbbc550d1e010de81"
}

Prisma.PrismaClientKnownRequestError = () => {
  throw new Error(`PrismaClientKnownRequestError is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)};
Prisma.PrismaClientUnknownRequestError = () => {
  throw new Error(`PrismaClientUnknownRequestError is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.PrismaClientRustPanicError = () => {
  throw new Error(`PrismaClientRustPanicError is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.PrismaClientInitializationError = () => {
  throw new Error(`PrismaClientInitializationError is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.PrismaClientValidationError = () => {
  throw new Error(`PrismaClientValidationError is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.NotFoundError = () => {
  throw new Error(`NotFoundError is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.Decimal = Decimal

/**
 * Re-export of sql-template-tag
 */
Prisma.sql = () => {
  throw new Error(`sqltag is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.empty = () => {
  throw new Error(`empty is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.join = () => {
  throw new Error(`join is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.raw = () => {
  throw new Error(`raw is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.validator = Public.validator

/**
* Extensions
*/
Prisma.getExtensionContext = () => {
  throw new Error(`Extensions.getExtensionContext is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.defineExtension = () => {
  throw new Error(`Extensions.defineExtension is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}

/**
 * Shorthand utilities for JSON filtering
 */
Prisma.DbNull = objectEnumValues.instances.DbNull
Prisma.JsonNull = objectEnumValues.instances.JsonNull
Prisma.AnyNull = objectEnumValues.instances.AnyNull

Prisma.NullTypes = {
  DbNull: objectEnumValues.classes.DbNull,
  JsonNull: objectEnumValues.classes.JsonNull,
  AnyNull: objectEnumValues.classes.AnyNull
}

/**
 * Enums
 */

exports.Prisma.TransactionIsolationLevel = makeStrictEnum({
  ReadUncommitted: 'ReadUncommitted',
  ReadCommitted: 'ReadCommitted',
  RepeatableRead: 'RepeatableRead',
  Serializable: 'Serializable'
});

exports.Prisma.RolesScalarFieldEnum = {
  id: 'id',
  name: 'name',
  isActive: 'isActive',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  deletedAt: 'deletedAt'
};

exports.Prisma.SyncDataLastIdScalarFieldEnum = {
  id: 'id',
  lastId: 'lastId',
  isActive: 'isActive',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  deletedAt: 'deletedAt'
};

exports.Prisma.ProductCategoryScalarFieldEnum = {
  id: 'id',
  name: 'name',
  genderId: 'genderId',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  deletedAt: 'deletedAt'
};

exports.Prisma.ProductTypeScalarFieldEnum = {
  id: 'id',
  itemsName: 'itemsName',
  productCategoryId: 'productCategoryId',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  deletedAt: 'deletedAt'
};

exports.Prisma.ProductTypeSizeScalarFieldEnum = {
  id: 'id',
  size: 'size',
  ietmsId: 'ietmsId',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  deletedAt: 'deletedAt'
};

exports.Prisma.GenderScalarFieldEnum = {
  id: 'id',
  name: 'name',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  deletedAt: 'deletedAt'
};

exports.Prisma.CountryScalarFieldEnum = {
  id: 'id',
  name: 'name',
  timezoneOffset: 'timezoneOffset',
  dialCode: 'dialCode',
  isActive: 'isActive',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  deletedAt: 'deletedAt'
};

exports.Prisma.StateScalarFieldEnum = {
  id: 'id',
  name: 'name',
  countryId: 'countryId',
  isActive: 'isActive',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  deletedAt: 'deletedAt'
};

exports.Prisma.AddressScalarFieldEnum = {
  id: 'id',
  doorNumber: 'doorNumber',
  streetName: 'streetName',
  pinCode: 'pinCode',
  stateId: 'stateId',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  deletedAt: 'deletedAt'
};

exports.Prisma.UserAddressScalarFieldEnum = {
  id: 'id',
  addressId: 'addressId',
  userId: 'userId',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  deletedAt: 'deletedAt'
};

exports.Prisma.UserScalarFieldEnum = {
  id: 'id',
  username: 'username',
  email: 'email',
  mobile: 'mobile',
  token: 'token',
  roleId: 'roleId',
  genderId: 'genderId',
  isActive: 'isActive',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  deletedAt: 'deletedAt'
};

exports.Prisma.ProductOwnerScalarFieldEnum = {
  id: 'id',
  syncUserId: 'syncUserId',
  ownerName: 'ownerName',
  ownerEmail: 'ownerEmail',
  ownerMobile: 'ownerMobile',
  storeName: 'storeName',
  storeAddress: 'storeAddress',
  storeCity: 'storeCity',
  storePincode: 'storePincode',
  storeState: 'storeState',
  customerCareEmail: 'customerCareEmail',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  deletedAt: 'deletedAt'
};

exports.Prisma.UserPasswordScalarFieldEnum = {
  id: 'id',
  password: 'password',
  userId: 'userId',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  deletedAt: 'deletedAt'
};

exports.Prisma.SearchItemsScalarFieldEnum = {
  id: 'id',
  searchName: 'searchName',
  userId: 'userId',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  deletedAt: 'deletedAt'
};

exports.Prisma.OrderScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  productId: 'productId',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  deletedAt: 'deletedAt'
};

exports.Prisma.UserLoginRequestScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  email: 'email',
  mobile: 'mobile',
  otp: 'otp',
  isUsed: 'isUsed',
  isActive: 'isActive',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  deletedAt: 'deletedAt'
};

exports.Prisma.ProductScalarFieldEnum = {
  id: 'id',
  syncId: 'syncId',
  title: 'title',
  price: 'price',
  productTypeId: 'productTypeId',
  productOwnerId: 'productOwnerId',
  userId: 'userId',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  deletedAt: 'deletedAt',
  isActive: 'isActive'
};

exports.Prisma.ProductReviewScalarFieldEnum = {
  id: 'id',
  productId: 'productId',
  userId: 'userId',
  review: 'review',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  deletedAt: 'deletedAt'
};

exports.Prisma.ReturnedProductScalarFieldEnum = {
  id: 'id',
  productId: 'productId',
  returns: 'returns',
  isActive: 'isActive',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  deletedAt: 'deletedAt'
};

exports.Prisma.DeleveryPeriodScalarFieldEnum = {
  id: 'id',
  productId: 'productId',
  deliveryForMetroCitys: 'deliveryForMetroCitys',
  deliveryForOtherCitys: 'deliveryForOtherCitys',
  isActive: 'isActive',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  deletedAt: 'deletedAt'
};

exports.Prisma.ProductColorScalarFieldEnum = {
  id: 'id',
  productId: 'productId',
  colors: 'colors',
  isActive: 'isActive',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  deletedAt: 'deletedAt'
};

exports.Prisma.PriceHistoryScalarFieldEnum = {
  id: 'id',
  price: 'price',
  productId: 'productId',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  deletedAt: 'deletedAt'
};

exports.Prisma.ProductAviableSizesScalarFieldEnum = {
  id: 'id',
  quantity: 'quantity',
  productColorId: 'productColorId',
  productTypeSizeId: 'productTypeSizeId',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  deletedAt: 'deletedAt'
};

exports.Prisma.SeasonalDressesScalarFieldEnum = {
  id: 'id',
  seasonal: 'seasonal',
  productId: 'productId',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  deletedAt: 'deletedAt'
};

exports.Prisma.ProductImagesScalarFieldEnum = {
  id: 'id',
  imageUrl: 'imageUrl',
  productColorId: 'productColorId',
  isActive: 'isActive',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  deletedAt: 'deletedAt'
};

exports.Prisma.CommonDescriptionScalarFieldEnum = {
  id: 'id',
  fit: 'fit',
  materail: 'materail',
  care: 'care',
  brandName: 'brandName',
  origin: 'origin',
  productId: 'productId',
  occasion: 'occasion',
  specialFeature: 'specialFeature',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  deletedAt: 'deletedAt'
};

exports.Prisma.TopDescriptionScalarFieldEnum = {
  id: 'id',
  productDescription: 'productDescription',
  sleeveTypeId: 'sleeveTypeId',
  weight: 'weight',
  chest: 'chest',
  shoulder: 'shoulder',
  neckTypeId: 'neckTypeId',
  type: 'type',
  colorFamily: 'colorFamily',
  printAndPattern: 'printAndPattern',
  length: 'length',
  pocket: 'pocket',
  commonDescriptionId: 'commonDescriptionId',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  deletedAt: 'deletedAt'
};

exports.Prisma.BottomDescriptionScalarFieldEnum = {
  id: 'id',
  productDescription: 'productDescription',
  weight: 'weight',
  printAndPattern: 'printAndPattern',
  length: 'length',
  waist: 'waist',
  hip: 'hip',
  commonDescriptionId: 'commonDescriptionId',
  type: 'type',
  colorFamily: 'colorFamily',
  pocket: 'pocket',
  kurtasDescriptionId: 'kurtasDescriptionId',
  topDescriptionId: 'topDescriptionId',
  beltLoop: 'beltLoop',
  typeOfPantId: 'typeOfPantId',
  typesOfPleatsId: 'typesOfPleatsId',
  typesOfLengthId: 'typesOfLengthId',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  deletedAt: 'deletedAt'
};

exports.Prisma.KurtasDescriptionScalarFieldEnum = {
  id: 'id',
  work: 'work',
  productDescription: 'productDescription',
  chest: 'chest',
  shoulder: 'shoulder',
  transparencyOfTheFabric: 'transparencyOfTheFabric',
  kurtasLengthTypeId: 'kurtasLengthTypeId',
  weight: 'weight',
  colorFamily: 'colorFamily',
  pocket: 'pocket',
  type: 'type',
  printAndpattern: 'printAndpattern',
  kurtasNeckTypeId: 'kurtasNeckTypeId',
  kurtasSleeveTypeId: 'kurtasSleeveTypeId',
  commonDescriptionId: 'commonDescriptionId',
  isActive: 'isActive',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  deletedAt: 'deletedAt'
};

exports.Prisma.ShoesDescriptionScalarFieldEnum = {
  id: 'id',
  pattern: 'pattern',
  footLength: 'footLength',
  type: 'type',
  soleMaterial: 'soleMaterial',
  printAndPattern: 'printAndPattern',
  upperMaterial: 'upperMaterial',
  closure: 'closure',
  toeType: 'toeType',
  weight: 'weight',
  colorFamily: 'colorFamily',
  productDescription: 'productDescription',
  packageContains: 'packageContains',
  commonDescriptionId: 'commonDescriptionId',
  isActive: 'isActive',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  deletedAt: 'deletedAt'
};

exports.Prisma.WatchesDescriptionScalarFieldEnum = {
  id: 'id',
  type: 'type',
  weight: 'weight',
  model: 'model',
  dialShape: 'dialShape',
  printAndPattern: 'printAndPattern',
  dialDiameter: 'dialDiameter',
  dialColor: 'dialColor',
  strapColor: 'strapColor',
  colorFamily: 'colorFamily',
  productDescription: 'productDescription',
  commonDescriptionId: 'commonDescriptionId',
  isActive: 'isActive',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  deletedAt: 'deletedAt'
};

exports.Prisma.PerfumesDescriptionScalarFieldEnum = {
  id: 'id',
  productDescription: 'productDescription',
  type: 'type',
  materialDescription: 'materialDescription',
  weight: 'weight',
  commonDescriptionId: 'commonDescriptionId',
  isActive: 'isActive',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  deletedAt: 'deletedAt'
};

exports.Prisma.InnersDescriptionScalarFieldEnum = {
  id: 'id',
  type: 'type',
  productDescription: 'productDescription',
  weight: 'weight',
  length: 'length',
  waistRise: 'waistRise',
  printAndPattern: 'printAndPattern',
  packageContains: 'packageContains',
  lookAndFeel: 'lookAndFeel',
  colorFamily: 'colorFamily',
  vestsSleeveTypeId: 'vestsSleeveTypeId',
  vestsNeckTypeId: 'vestsNeckTypeId',
  commonDescriptionId: 'commonDescriptionId',
  multiColors: 'multiColors'
};

exports.Prisma.WarrantyScalarFieldEnum = {
  id: 'id',
  shoesDescriptionId: 'shoesDescriptionId',
  watchsId: 'watchsId',
  warrantyPeriod: 'warrantyPeriod',
  isActive: 'isActive',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  deletedAt: 'deletedAt'
};

exports.Prisma.SleeveTypeScalarFieldEnum = {
  id: 'id',
  name: 'name',
  isActive: 'isActive',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  deletedAt: 'deletedAt'
};

exports.Prisma.NeckTypeScalarFieldEnum = {
  id: 'id',
  name: 'name',
  isActive: 'isActive',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  deletedAt: 'deletedAt'
};

exports.Prisma.KurtasLengthTypeScalarFieldEnum = {
  id: 'id',
  name: 'name',
  isActive: 'isActive',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  deletedAt: 'deletedAt'
};

exports.Prisma.TypesOfBottomScalarFieldEnum = {
  id: 'id',
  name: 'name',
  isActive: 'isActive',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  deletedAt: 'deletedAt'
};

exports.Prisma.TypesOfPleatsScalarFieldEnum = {
  id: 'id',
  name: 'name',
  isActive: 'isActive',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  deletedAt: 'deletedAt'
};

exports.Prisma.TypesOfLengthBottomScalarFieldEnum = {
  id: 'id',
  name: 'name',
  isActive: 'isActive',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  deletedAt: 'deletedAt'
};

exports.Prisma.QuantityHistoryScalarFieldEnum = {
  id: 'id',
  quantity: 'quantity',
  productAviableSizesId: 'productAviableSizesId',
  timestamp: 'timestamp',
  isActive: 'isActive',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  deletedAt: 'deletedAt'
};

exports.Prisma.OfferScalarFieldEnum = {
  id: 'id',
  productId: 'productId',
  offerPercntage: 'offerPercntage',
  offerPrice: 'offerPrice',
  currentPrice: 'currentPrice',
  offerQuantity: 'offerQuantity',
  currentQuantity: 'currentQuantity',
  isActive: 'isActive',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  deletedAt: 'deletedAt'
};

exports.Prisma.OfferValidityScalarFieldEnum = {
  id: 'id',
  fromDate: 'fromDate',
  toDate: 'toDate',
  fromTime: 'fromTime',
  toTime: 'toTime',
  monday: 'monday',
  tuesday: 'tuesday',
  wednesday: 'wednesday',
  thursday: 'thursday',
  friday: 'friday',
  saturday: 'saturday',
  sunday: 'sunday',
  offerId: 'offerId',
  offerPromotionPeriodId: 'offerPromotionPeriodId',
  isActive: 'isActive',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  deletedAt: 'deletedAt'
};

exports.Prisma.OfferPromotionPeriodsScalarFieldEnum = {
  id: 'id',
  name: 'name',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  deletedAt: 'deletedAt'
};

exports.Prisma.CartScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  productId: 'productId',
  isCheckedOut: 'isCheckedOut',
  isRemoved: 'isRemoved',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  deletedAt: 'deletedAt'
};

exports.Prisma.WishlistScalarFieldEnum = {
  id: 'id',
  userId: 'userId'
};

exports.Prisma.WishlistItemScalarFieldEnum = {
  id: 'id',
  wishlistId: 'wishlistId',
  productId: 'productId'
};

exports.Prisma.SortOrder = {
  asc: 'asc',
  desc: 'desc'
};

exports.Prisma.QueryMode = {
  default: 'default',
  insensitive: 'insensitive'
};

exports.Prisma.NullsOrder = {
  first: 'first',
  last: 'last'
};


exports.Prisma.ModelName = {
  Roles: 'Roles',
  SyncDataLastId: 'SyncDataLastId',
  ProductCategory: 'ProductCategory',
  ProductType: 'ProductType',
  ProductTypeSize: 'ProductTypeSize',
  Gender: 'Gender',
  Country: 'Country',
  State: 'State',
  Address: 'Address',
  UserAddress: 'UserAddress',
  User: 'User',
  ProductOwner: 'ProductOwner',
  UserPassword: 'UserPassword',
  SearchItems: 'SearchItems',
  Order: 'Order',
  UserLoginRequest: 'UserLoginRequest',
  Product: 'Product',
  ProductReview: 'ProductReview',
  ReturnedProduct: 'ReturnedProduct',
  DeleveryPeriod: 'DeleveryPeriod',
  ProductColor: 'ProductColor',
  PriceHistory: 'PriceHistory',
  ProductAviableSizes: 'ProductAviableSizes',
  SeasonalDresses: 'SeasonalDresses',
  ProductImages: 'ProductImages',
  CommonDescription: 'CommonDescription',
  TopDescription: 'TopDescription',
  BottomDescription: 'BottomDescription',
  KurtasDescription: 'KurtasDescription',
  ShoesDescription: 'ShoesDescription',
  WatchesDescription: 'WatchesDescription',
  PerfumesDescription: 'PerfumesDescription',
  InnersDescription: 'InnersDescription',
  Warranty: 'Warranty',
  SleeveType: 'SleeveType',
  NeckType: 'NeckType',
  KurtasLengthType: 'KurtasLengthType',
  TypesOfBottom: 'TypesOfBottom',
  TypesOfPleats: 'TypesOfPleats',
  TypesOfLengthBottom: 'TypesOfLengthBottom',
  QuantityHistory: 'QuantityHistory',
  Offer: 'Offer',
  OfferValidity: 'OfferValidity',
  OfferPromotionPeriods: 'OfferPromotionPeriods',
  Cart: 'Cart',
  Wishlist: 'Wishlist',
  WishlistItem: 'WishlistItem'
};

/**
 * Create the Client
 */
class PrismaClient {
  constructor() {
    throw new Error(
      `PrismaClient is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
    )
  }
}
exports.PrismaClient = PrismaClient

Object.assign(exports, Prisma)
